{"mappings":"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","sources":["src/components/texto/index.ts","src/components/todo-item/index.ts","src/components/header/index.ts","src/state.ts","src/pages/home/index.ts","src/index.ts"],"sourcesContent":["// import {state} from \"./state.ts\";\r\n\r\nclass Texto extends HTMLElement {\r\n    shadow: ShadowRoot;\r\n    tagName: string;\r\n    tags: string[] = [\"h1\", \"p\"];\r\n    tag: string = \"p\";\r\n    constructor(){\r\n        super();\r\n        this.shadow = this.attachShadow({mode: \"open\"});\r\n        // check que el tag sea alguno de los que definimos en tags, si no es, siempre será p por defecto\r\n        if(this.tags.includes(this.getAttribute(\"tag\") as any)){\r\n            this.tag = this.getAttribute(\"tag\") || this.tag;\r\n        }\r\n        this.render();\r\n    }\r\n    render(){\r\n        const rootEl = document.createElement(this.tag);\r\n        rootEl.textContent = this.textContent;\r\n        this.shadow.appendChild(rootEl);\r\n    }\r\n}\r\ncustomElements.define(\"my-text\", Texto)","// import {state} from \"./state.ts\";\r\n\r\ncustomElements.define(\r\n    \"todo-item\",\r\n    class extends HTMLElement {\r\n        shadow: ShadowRoot;\r\n        title: string;\r\n        checked: boolean = false;\r\n        constructor(){\r\n            super();\r\n            this.shadow = this.attachShadow({mode: \"open\"});\r\n        }\r\n        connectedCallback(){\r\n            this.title = this.getAttribute(\"title\") || \"\";\r\n            // Como via attr sólo podemos pasar texto, para definir checked tenemos que hacerlo asi\r\n            this.checked = this.hasAttribute(\"checked\");\r\n            (this.id as any) = this.getAttribute(\"id\");\r\n\r\n            const style = document.createElement(\"style\");\r\n            style.innerHTML = `\r\n\r\n\r\n                .root {\r\n                    border-radius: 4px;\r\n                    padding: 22px 13px;\r\n                    background-color: #FFF599;\r\n                    margin-bottom: 15px;\r\n                    font-size: 18px;\r\n                    font-family: Roboto;\r\n                    font-style: normal;\r\n                    font-weight: 400;\r\n                    line-height: normal;\r\n                    display: flex;\r\n                    align-items: flex-start;\r\n                    justify-content: space-between;\r\n                    height: 64px;\r\n                    width: 79.5%;\r\n                }\r\n\r\n                @media (min-width: 960px) {              \r\n                    .root {\r\n                        display: flex;\r\n                        min-width: 280px;\r\n                    }\r\n                }\r\n\r\n                .titulo {\r\n                    margin: 0;\r\n                }\r\n\r\n                .titulo.checked {\r\n                    text-decoration: line-through;\r\n                }\r\n\r\n            `;\r\n            this.shadow.appendChild(style);\r\n            \r\n            this.render();\r\n        }\r\n        addListeners(){\r\n            const checkedEl = this.shadow.querySelector(\".checkbox-input\");\r\n            checkedEl?.addEventListener('click', (e) => {\r\n                // esto se llama casteo. Es cambiar el valor de un tipo de dato a otro tipo de dato\r\n                const target = e.target as any;\r\n                const event = new CustomEvent(\"change\", {detail: {\r\n                    id: this.id,\r\n                    value: target.checked\r\n                    }\r\n                });\r\n                this.dispatchEvent(event);\r\n            })\r\n        }\r\n        render(){\r\n            const div = document.createElement(\"div\");\r\n            // acá el componente no toma decisiones. Se somete a los attributos simlpemente. Esto es asi para que un comp mayor, que puede ser la página.\r\n            // la línea 33 es un ternary operator quiere decir que si hay checked asigná checked si no, string vacio\r\n            div.innerHTML = `\r\n                <div class=\"root\">\r\n                    <h4 class=\"titulo ${this.checked ? \"checked\" : \"\"}\">\r\n                        ${this.title}\r\n                    </h4>\r\n                    <div>\r\n                        <input type=\"checkbox\" class=\"checkbox-input\"  ${this.checked ? \"checked\" : \"\"}>\r\n                    </div>\r\n                </div>\r\n            `;\r\n            this.classList.add(\"todo-item\");\r\n            this.shadow.appendChild(div);\r\n            this.addListeners();\r\n        }\r\n    }\r\n);","customElements.define(\r\n    \"my-header\", \r\n    class extends HTMLElement {\r\n        shadow: ShadowRoot;\r\n        constructor(){\r\n            super();\r\n            this.shadow = this.attachShadow({mode: \"open\"});\r\n        }\r\n        connectedCallback(){\r\n            const style = document.createElement(\"style\");\r\n            style.innerHTML = `\r\n            .header {\r\n                background-color: #FF8282;\r\n                height: 68px;\r\n                display: block;\r\n            }\r\n            `;\r\n            this.shadow.appendChild(style);\r\n            this.render();\r\n        }\r\n        render(){\r\n            const div = document.createElement(\"div\");\r\n            div.innerHTML = `\r\n                <header class=\"header\">\r\n                </header>\r\n            `;\r\n            this.shadow.appendChild(div);\r\n        }\r\n    }\r\n);","const state = {\r\n    data: {\r\n        tasks: [\r\n            {id: 1, title: \"primer item\",\r\n            completed: false,\r\n            },\r\n            {id: 2, title:\"segundo item\",\r\n            completed: true,\r\n            },\r\n            {id: 3, title:\"tercer item\",\r\n            deleted: true\r\n            }\r\n        ],\r\n    },\r\n    listeners: [],\r\n    init(){\r\n        // Acá hay un problema y es que cuando cerramos el navegador en incógnito, se borran los datos de localStorage. Entonces, al iniciar de nuevo la app, se rompe.\r\n        const localData = localStorage.getItem(\"saved-state\");\r\n        this.setState(JSON.parse(localData as any));\r\n        // const currentState = this.getState();\r\n        // this.setState(currentState);\r\n    },\r\n    getState(){\r\n        return this.data;\r\n    },\r\n    getEnabledTasks(){\r\n        const currentState = this.getState();\r\n        \r\n        return currentState.tasks.filter((t) => \r\n            !t.deleted\r\n        );\r\n    },\r\n    addTask(id, title){\r\n        // siempre nos manejamos haciendo una copia, modificándola y seteándola nuevamente\r\n        const currentState = this.getState();\r\n        currentState.tasks.push({id, title, completed: false})\r\n        this.setState(currentState);\r\n    },\r\n    changeItemState(id, value){\r\n        const currentState = this.getState();\r\n        const found = currentState.tasks.find(t => t.id == id);\r\n        found.completed = value;\r\n        this.setState(currentState);\r\n    },\r\n    setState(newState){\r\n        this.data = newState;\r\n        for (const cb of this.listeners){\r\n            // haciendo esto nos ahorramos leer el estado en el subscribe y siempre recibimos el ultimo estado\r\n            cb(newState);\r\n            localStorage.setItem(\"saved-state\", JSON.stringify(newState));\r\n        }\r\n        console.log('soy el state he cambiado ', this.data);\r\n    },\r\n    subscribe(callback: (any) => any) {\r\n        this.listeners.push(callback);\r\n    }\r\n\r\n};\r\n\r\nexport {state};","// la page estará enchufada al estado y puede ser un custom element o un elemento con createElement y lo manipulamos para que muestre el listado de pendientes\r\nimport { create } from \"domain\";\r\nimport {state} from \"../../state\";\r\nimport { toUnicode } from \"punycode\";\r\n\r\n// lo creamos en una funcion para que sea invocable\r\nexport function initHomePage(container){\r\n    const div = document.createElement(\"div\");\r\n    const tasks = state.getEnabledTasks();\r\n    const style = document.createElement(\"style\");\r\n    div.innerHTML = `\r\n        <my-header></my-header>\r\n        <div class=\"div-container\">\r\n            <h1 class=\"home-title\">Mis pendientes</h1>\r\n            <div class=\"container\">\r\n                <div class=\"input-container\">\r\n                    <p class=\"p\">Nuevo pendiente</p>\r\n                    <input type=\"text\" class=\"input\">\r\n                </div>\r\n                <button class=\"add-button\">Agregar</button>\r\n            </div>\r\n            <ul class=\"lista\">\r\n            </ul>\r\n        </div>\r\n    `;\r\n    const listaEl = div.querySelector(\".lista\");\r\n    style.innerHTML = `\r\n        @import url('https://fonts.googleapis.com/css2?family=Roboto:wght@400;700&display=swap');\r\n\r\n        .div-container {\r\n            display: flex;\r\n            flex-direction: column;\r\n\r\n        }\r\n\r\n        @media (min-width: 960px) {\r\n            .div-container {\r\n                display: flex;\r\n                justify-content: center;\r\n                padding: 48px 160px 0px 160px;\r\n                gap: 30px;\r\n            }\r\n        }\r\n\r\n        .home-title { \r\n            font-family: 'Roboto', sans-serif;\r\n            font-size: 52px;\r\n            font-weight: 700;\r\n            padding: 41px 74px 25px 30px;\r\n            margin: 0;\r\n        }\r\n\r\n        @media (min-width: 960px) {\r\n            .home-title {\r\n                padding: 0;\r\n            }\r\n        }\r\n\r\n        .container {\r\n            display: flex;\r\n            flex-direction: column;\r\n            align-items: flex-start;\r\n            margin-left: 31px;\r\n            margin-bottom: 46px;\r\n            width: 100%;\r\n        }\r\n\r\n\r\n        @media (min-width: 960px) {\r\n            .container {\r\n                margin: 0;\r\n                flex-direction: row;\r\n                align-items: flex-end;\r\n                align-self: center;\r\n            }\r\n        }\r\n\r\n        .input-container {\r\n            width: 82.5%;\r\n        }\r\n\r\n        @media (min-width: 960px) {\r\n            .input-container {\r\n                display: flex;\r\n                flex-direction: column;\r\n                width: 70%;\r\n            }\r\n        }\r\n\r\n        .input {\r\n            width: 100%;\r\n            height: 55px;\r\n            border-radius: 4px;\r\n            border: 2px solid #000;\r\n            margin-bottom: 12px;\r\n        }\r\n\r\n        @media (min-width: 960px) {\r\n            .input {\r\n                width: 95%;\r\n                margin-bottom: 0px;\r\n            }\r\n        }\r\n\r\n        .p {\r\n            font-size: 18px;\r\n            font-family: Roboto;\r\n            font-weight: 400;\r\n            margin-bottom: 0px;\r\n        }\r\n\r\n        .add-button {\r\n            width: 84.5%;\r\n            height: 55px;\r\n            flex-shrink: 0;\r\n            border: none;\r\n            border-radius: 4px;\r\n            background: #9CBBE9;\r\n            color: #000;\r\n            text-align: center;\r\n            font-size: 22px;\r\n            font-family: Roboto;\r\n            font-style: normal;\r\n            font-weight: 500;\r\n            line-height: normal;\r\n        }\r\n\r\n        @media (min-width: 960px) {\r\n            .add-button {\r\n                width: 35%;\r\n                height: 60px;\r\n            }\r\n        }\r\n\r\n        .add-button:hover {\r\n            cursor: pointer;\r\n        }\r\n\r\n        .lista {\r\n            display: flex;\r\n            flex-direction: column;\r\n            width: 100%;\r\n            padding: 0;\r\n            margin: 0 31px;\r\n            height: auto;\r\n        }\r\n\r\n        @media (min-width: 960px) {\r\n            .lista {\r\n                flex-flow: row wrap;\r\n                justify-content: space-around;\r\n                margin: 0;\r\n                padding: 0;\r\n                gap: 10px;\r\n            }\r\n        }\r\n    `;\r\n\r\n    const btnEl = div.querySelector(\".add-button\");\r\n    const inputEl = div.querySelector(\".input\")\r\n    \r\n\r\n    function createTasks(tasks){\r\n        // vaciamos la lista cada vez que invocaoms a createTasks para que se imprima con la última version del state\r\n        (listaEl as any).innerHTML = \"\";\r\n        for (const task of tasks) {\r\n            const todoItemEl = document.createElement(\"todo-item\");\r\n            todoItemEl.setAttribute(\"title\", task.title);\r\n            todoItemEl.setAttribute(\"id\", task.id);\r\n            if (task.completed){\r\n                todoItemEl.setAttribute(\"checked\", \"true\");\r\n            }\r\n            todoItemEl.addEventListener(\"change\", (e:any) => {\r\n                state.changeItemState(e.detail.id, e.detail.value);\r\n            })\r\n            listaEl?.appendChild(todoItemEl);\r\n        }\r\n    };\r\n\r\n\r\n    \r\n    // cada vez que se modifique el state y se invoque a setState, se van a ejecutar los listeners que son estas funciones que pasamos como callback a subscribe. Esto se ejecuta cada vez que cambie el state\r\n    state.subscribe(()=>{\r\n        createTasks(state.getEnabledTasks());\r\n    });\r\n\r\n    // Esto se ejecuta cuando se inicia la homePage por primera vez\r\n    createTasks(tasks);\r\n\r\n    (btnEl as any).addEventListener('click', () => {\r\n        if((inputEl as any).value == \"\") {\r\n            alert(\"Por favor, inserta un task\");\r\n        } else {\r\n            state.addTask(Math.random(), (inputEl as any).value)\r\n        }\r\n    });\r\n    div.appendChild(style);\r\n    container.appendChild(div);\r\n};","import \"./components/texto\";\r\nimport \"./components/todo-item\";\r\nimport \"./components/header\";\r\nimport { initHomePage } from \"./pages/home\";\r\nimport { state } from \"./state\";\r\n\r\n(function(){\r\n    // Si habilitamos y lo corremos de manera local podemos hacer que persista datos en localStorage y luego el state los recupere\r\n    // state.init();\r\n    const root = document.querySelector(\".root\");\r\n    initHomePage(root);\r\n})();\r\n"],"names":["$c7dc8d147f6dbe73$var$Texto","HTMLElement","super","tags","tag","shadow","this","attachShadow","mode","includes","getAttribute","render","rootEl","document","createElement","textContent","appendChild","customElements","define","checked","connectedCallback","title","hasAttribute","id","style","innerHTML","addListeners","checkedEl","querySelector","addEventListener","e","target","event","CustomEvent","detail","value","dispatchEvent","div","classList","add","$792e4afce125cd80$export$c837a8b98c265ae3","data","tasks","completed","deleted","listeners","init","localData","localStorage","getItem","setState","JSON","parse","getState","getEnabledTasks","filter","t","addTask","currentState","push","changeItemState","find","newState","cb","setItem","stringify","console","log","subscribe","callback","container","listaEl","btnEl","inputEl","createTasks","tasks1","task","todoItemEl","setAttribute","alert","Math","random","$75d7da451051ab0b$export$36e0f3cd0ce1227"],"version":3,"file":"index.5d1f5691.js.map"}